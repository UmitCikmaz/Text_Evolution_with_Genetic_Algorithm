# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ozZ90-o8D7qayj3PS5NDWWVhcrR3zgEU
"""

import random

# Hedef cümle
target_sentence = "Hello, World!"

# İzin verilen karakterler
allowed_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ,.!"

# Popülasyon boyutu
population_size = 100

# Mutasyon oranı (%)
mutation_rate = 0.01

def generate_individual(length):
    """Rastgele bir birey (komut listesi) oluşturur."""
    return [random.choice(allowed_chars) for _ in range(length)]

def calculate_fitness(individual):
    """Bir bireyin uygunluğunu hesaplar (hedef cümleye ne kadar yakınsa, o kadar iyi)."""
    fitness = sum(1 for expected, actual in zip(target_sentence, individual) if expected == actual)
    return fitness

def crossover(parent1, parent2):
    """İki ebeveyn bireyden yeni bir çocuk birey oluşturur."""
    crossover_point = random.randint(0, len(parent1))
    child = parent1[:crossover_point] + parent2[crossover_point:]
    return child

def mutate(individual):
    """Bir bireyin mutasyonunu gerçekleştirir (rastgele bir karakteri değiştirir)."""
    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = random.choice(allowed_chars)
    return individual

# Başlangıç popülasyonunu oluştur
population = [generate_individual(len(target_sentence)) for _ in range(population_size)]

# Genetik algoritma iterasyonları
for generation in range(1000):
    # Uygunluk değerlerini hesapla
    fitness_scores = [calculate_fitness(individual) for individual in population]

    # En iyi bireyleri seç
    best_individuals = sorted(zip(population, fitness_scores), key=lambda x: x[1], reverse=True)[:10]
    print("Generation:", generation, "Best:", best_individuals[0])

    # Yeni nesil bireyler oluştur
    new_population = []

    # En iyi bireyleri yeni nesle ekle (elitizm)
    for individual, _ in best_individuals:
        new_population.append(individual)

    # Çaprazlama ve mutasyon ile yeni bireyler oluştur
    while len(new_population) < population_size:
        parent1, parent2 = random.choices(population, k=2, weights=fitness_scores)
        child = crossover(parent1, parent2)
        child = mutate(child)
        new_population.append(child)

    # Yeni nesli güncelle
    population = new_population